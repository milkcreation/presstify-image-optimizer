#!/usr/bin/env php
<?php

$paths = [
    __DIR__.'/../autoload.php',
    __DIR__.'/../../../autoload.php'
];

foreach ($paths as $path) :
    if (file_exists($path)) :
        require_once $path;
        break;
    endif;
endforeach;

use League\Flysystem\Adapter\Local;
use League\Flysystem\Filesystem;
use League\Flysystem\FilesystemNotFoundException;
use League\Flysystem\MountManager;
use Spatie\Image\Image;
use Spatie\Image\Exceptions\InvalidManipulation;

/** Deboggage. */
error_reporting(E_ALL);
ini_set('display_errors', 0);

$opts = getopt('i:o:w:h:r::');

/**
 * @var string $i Chemin du fichier/dossier à optimiser.
 * @var string $o Chemin du dossier vers lequel les images optimisées doivent être écrites.
 * @var int $w Largeur d'optimisation.
 * @var int $h Hauteur d'optimisation.
 * @var bool $r Conservation de l'arborescence.
 */
extract($opts);


$input = (!empty($i) && file_exists($i)) ? realpath($i) : null;
$output = (!empty($o) && file_exists($o)) ? realpath($o) : null;
$width = (!empty($w) && is_numeric($w)) ? $w : null;
$height = (!empty($h) && is_numeric($h)) ? $h : null;
$recursive = isset($r);

/**
 * Récupération des types mimes autorisés à être optimisés.
 *
 * @return array
 */
function allowed_mime_types()
{
    return [
        'image/gif',
        'image/jpeg',
        'image/png',
        'image/svg+xml',
    ];
}

/**
 * Optimisation d'une image.
 *
 * @param string $imagePath Chemin absolu du fichier image.
 * @param int $imageSize Taille du fichier en octets.
 * @param null|int $width Largeur de redimensionnement.
 * @param null|int $height Hauteur de redimensionnement.
 *
 * @return void
 */
function optimize_image($imagePath, $imageSize, $width = null, $height = null)
{
    try {
        $image = Image::load($imagePath);

        if (!is_null($width) && ($image->getWidth() > $width)) :
            $image->width($width);
        endif;
        if (!is_null($height) && ($image->getHeight() > $height)) :
            $image->height($height);
        endif;

        $image->optimize()->save();

        $current_file_size = filesize($imagePath);
        if ($current_file_size >= $imageSize) :
            printf("Gain de %s : %s\n", $imagePath, '0%');
        else :
            $diff = $imageSize - $current_file_size;
            $percentage = round(($diff / $imageSize) * 100, 2) . '%';
            printf("Gain de %s : %s\n", $imagePath, $percentage);
        endif;

    } catch (InvalidManipulation $e) {
        printf("%s : optimisation impossible.\n", $imagePath);
    }
}

if (!is_null($input)) :
    $fileSystems = [
        'input' => new Filesystem(new Local(is_file($input) ? dirname($input) : $input))
    ];
    if (!is_null($output)) :
        $fileSystems['output'] = new Filesystem(new Local($output));
    endif;
    $manager = new MountManager($fileSystems);
    try {
        $manager->listContents('output://', true);
        $outputDir = true;
    } catch (FilesystemNotFoundException $e) {
        $outputDir = false;
    }

    if (is_file($input)) :
        $inputName = basename($input);
        $inputDirname = dirname($input);
        if ($manager->has('input://'. $inputName) && in_array($manager->getMimetype('input://' . $inputName), allowed_mime_types())) :
            if ($outputDir) :
                $manager->put('output://' . $inputName, $manager->read('input://' . $inputName));
                optimize_image($output . '/' . $inputName, $manager->getSize('input://' . $inputName), $width, $height);
            else :
                optimize_image($input, $manager->getSize('input://' . $inputName), $width, $height);
            endif;
        endif;
    else :
        foreach ($manager->listContents('input://', $recursive) as $file) :
            if ($file['type'] === 'dir') :
                continue;
            endif;
            if (!$manager->has('input://'. $file['path'])) :
                continue;
            endif;
            if (!in_array($manager->getMimetype('input://' . $file['path']), allowed_mime_types())) :
                continue;
            endif;
            if ($outputDir) :
                if (!empty($file['dirname']) && !$manager->has('output://' . $file['dirname'])) :
                    $manager->createDir('output://' . $file['dirname']);
                endif;
                $manager->put('output://' . $file['path'], $manager->read('input://' . $file['path']));
                optimize_image($output . '/' . $file['path'], $file['size'], $width, $height);
            else :
                optimize_image($input . '/' . $file['path'], $file['size'], $width, $height);
            endif;
        endforeach;
    endif;
else :
    echo "Optimisation de(s) image(s) impossible !\n";
endif;
